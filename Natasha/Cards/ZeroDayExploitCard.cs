using Nanoray.PluginManager;
using Nickel;
using Shockah.Kokoro;
using Shockah.Shared;
using System.Collections.Generic;
using System.Reflection;

namespace Shockah.Natasha;

internal sealed class ZeroDayExploitCard : Card, IRegisterable
{
	public static void Register(IPluginPackage<IModManifest> package, IModHelper helper)
	{
		helper.Content.Cards.RegisterCard(MethodBase.GetCurrentMethod()!.DeclaringType!.Name, new()
		{
			CardType = MethodBase.GetCurrentMethod()!.DeclaringType!,
			Meta = new()
			{
				deck = ModEntry.Instance.NatashaDeck.Deck,
				rarity = ModEntry.GetCardRarity(MethodBase.GetCurrentMethod()!.DeclaringType!),
				upgradesTo = [Upgrade.A, Upgrade.B]
			},
			Art = helper.Content.Sprites.RegisterSpriteOrDefault(package.PackageRoot.GetRelativeFile("assets/Cards/ZeroDayExploit.png"), StableSpr.cards_Corrode).Sprite,
			Name = ModEntry.Instance.AnyLocalizations.Bind(["card", "ZeroDayExploit", "name"]).Localize
		});
	}

	public override CardData GetData(State state)
		=> upgrade switch
		{
			Upgrade.A => new() { cost = 0, exhaust = true, description = ModEntry.Instance.Localizations.Localize(["card", "ZeroDayExploit", "description", upgrade.ToString()]) },
			Upgrade.B => new() { cost = 2, exhaust = true, description = ModEntry.Instance.Localizations.Localize(["card", "ZeroDayExploit", "description", upgrade.ToString()]) },
			_ => new() { cost = 1, exhaust = true, description = ModEntry.Instance.Localizations.Localize(["card", "ZeroDayExploit", "description", upgrade.ToString()]) },
		};

	public override List<CardAction> GetActions(State s, Combat c)
		=> upgrade switch
		{
			Upgrade.B => [
				ModEntry.Instance.KokoroApi.Conditional.MakeAction(
					ModEntry.Instance.KokoroApi.Conditional.HasStatus(Status.corrode, targetPlayer: false),
					ModEntry.Instance.KokoroApi.ContinueStop.MakeTriggerAction(IKokoroApi.IV2.IContinueStopApi.ActionType.Stop, out var stopId).AsCardAction
				).AsCardAction.OmitFromTooltips(true),
				ModEntry.Instance.KokoroApi.ContinueStop.MakeFlaggedAction(
					IKokoroApi.IV2.IContinueStopApi.ActionType.Stop,
					stopId,
					new AStatus { targetPlayer = false, status = Status.corrode, statusAmount = 2 }
				).AsCardAction.Disabled(c.otherShip.Get(Status.corrode) > 0)
			],
			_ => [
				ModEntry.Instance.KokoroApi.Conditional.MakeAction(
					ModEntry.Instance.KokoroApi.Conditional.HasStatus(Status.corrode, targetPlayer: false),
					ModEntry.Instance.KokoroApi.ContinueStop.MakeTriggerAction(IKokoroApi.IV2.IContinueStopApi.ActionType.Stop, out var stopId).AsCardAction
				).AsCardAction.OmitFromTooltips(true),
				ModEntry.Instance.KokoroApi.ContinueStop.MakeFlaggedAction(
					IKokoroApi.IV2.IContinueStopApi.ActionType.Stop,
					stopId,
					new AStatus { targetPlayer = false, status = Status.corrode, statusAmount = 1 }
				).AsCardAction.Disabled(c.otherShip.Get(Status.corrode) > 0)
			]
		};
}
